{
  "name": "Switchit",
  "tagline": "Command-line Switch and Dispatcher Framework",
  "body": "![switchit logo](assets/switchit_logo.png)  \r\n  \r\n[![Build Status](https://travis-ci.org/dongryphon/switchit.svg?branch=master)](https://travis-ci.org/dongryphon/switchit)\r\n[![Coverage Status](https://coveralls.io/repos/github/dongryphon/switchit/badge.svg?branch=master)](https://coveralls.io/github/dongryphon/switchit?branch=master)\r\n[![Dependencies Status](https://david-dm.org/dongryphon/switchit/status.svg)](https://david-dm.org/dongryphon/switchit)\r\n[![npm version](https://badge.fury.io/js/switchit.svg)](https://badge.fury.io/js/switchit)\r\n[![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)   \r\n\r\n# switchit\r\nA no-nonsense framework for command-line switch parsing and command dispatching.\r\n\r\n`switchit` enables you to write modern command-line applications using a straightforward API and features _including_:\r\n\r\n* [x] [Robust command definition using a simple object-oriented API](#getting-started) \r\n* [x] [Effortless switch and positional argument parsing](#support-for-positional-arguments) \r\n* [x] [Promise based command dispatching](#promises-we-ve-got-those-too) \r\n* [x] [Interactive prompt for missing values](#interactive-prompt-for-missing-values)\r\n* [x] [Required and optional switches and parameters](docs/Features.md#required-and-optional-switches-and-parameters) \r\n* [x] [Variadic switches and parameters](docs/Features.md#variadic-switches-and-parameters) \r\n* [x] [Nested command hierarchy (like `git remote add {args}`)](docs/Features.md#nested-command-hierarchy) \r\n* [x] [Advanced command chaining using `and` and `then`](docs/Features.md#advanced-command-chaining) \r\n* [x] [Dispatching via shortest unique prefix for sub-commands and switches](docs/Features.md#shortest-unique-prefix-for-sub-commands-and-switches) \r\n* [x] [Custom command aliases and default sub-command](docs/Features.md#custom-aliases-and-default-sub-command) \r\n* [x] [Complex command invocation using response files](docs/Features.md#response-file-processing) \r\n* [x] [Comprehensive built-in help command](docs/Features.md#built-in-help) \r\n\r\nThere are so many features and functionality to describe that they got [its own document](docs/Features.md) \r\njust to outline them all!\r\n\r\n## Getting Started\r\n\r\n**Quick Start**\r\n\r\nInstall `switchit` into your project:\r\n\r\n    $ npm install switchit --save\r\n\r\nCreate a `.js` file and add the following:\r\n \r\n    const Command = require('switchit').Command;\r\n    \r\n    class SayHi extends Command {\r\n        execute (params) {\r\n            console.log(`Hi, ${params.name}!`);\r\n        }\r\n    }\r\n    \r\n    SayHi.define({\r\n        switches: 'name'\r\n    });\r\n    \r\n    new SayHi().run();\r\n\r\nRun your project file, don't forget to pass `--name`:\r\n\r\n    $ node examples/sayhi.js --name John\r\n    Hi, John!\r\n\r\n### Support for positional arguments \r\n\r\nYou can also accept positional arguments as parameters in your command: \r\n\r\n    ...\r\n    \r\n    SayHi.define({\r\n        parameters: 'name'  // changed this from \"switches\" to \"parameters\"\r\n    });\r\n    \r\n    ...\r\n   \r\nLook ma, no switches!\r\n\r\n    $ node examples/parameter.js Paul\r\n    Hi, Paul!\r\n\r\nDo you want to read a parameter form either positional arguments or switches? \r\n[`switchit` supports it too!](docs/Features.md#Switchy-params) \r\n\r\n### Promises? `switchit` has those too! \r\n\r\nThe `.run()` method returns a promise! \r\n\r\n    ...\r\n    \r\n    new SayHi().run().then(() => { \r\n        console.log(\"Success!\"); \r\n    },(e) => { \r\n        console.error(`Oh no! ${e.message}`) \r\n    });\r\n    \r\nCheck it out:\r\n\r\n    $ node examples/promise.js\r\n    Oh no! Missing value for parameter: \"name\"\r\n    $ node examples/promise.js George \r\n    Hi, George!\r\n    Success!\r\n\r\n### Interactive prompt for missing values\r\n\r\nWanna see somethiing awesome? Just add `interactive: true` to your command definition:\r\n\r\n    ....\r\n    \r\n    SayHi.define({\r\n        parameters: 'name',\r\n        interactive: true,\r\n        // Optionally add some help texts to improve the UI\r\n        //  more info at docs/Features.md#built-in-help\r\n        help: {\r\n            '': 'This is a command that says hi!',\r\n            'name': 'Your name'\r\n        }\r\n    });\r\n    \r\n    ...\r\n    \r\nRun it with no arguments to see it in action:\r\n\r\n    $ node interactive.js\r\n    This is a command that says hi!\r\n    Press ^C at any time to quit.\r\n    \r\n    Your name\r\n    ? name: \r\n\r\nCheck [docs/Interactive.md](docs/Features.md#Interactive-prompt-on-missing-values) for more information\r\non how to take advantage of this feature.\r\n\r\n## More examples and API\r\n\r\nOnce you get the hang of the examples above, make sure to check our [examples](examples/)\r\ndirectory or our complete [docs](docs/) for more information and API docs.\r\n\r\n## Contributing\r\n\r\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on the code of conduct, and the\r\nprocess for submitting pull requests.\r\n\r\n## Versioning\r\n\r\n`switchit` uses [SemVer](http://semver.org/) for versioning. For the versions available, see the\r\n[tags on this repository](https://github.com/dongryphon/switchit/tags). \r\n\r\n## Authors\r\n\r\n* **Don Griffin** - *Author* - [dongryphon](https://github.com/dongryphon)\r\n\r\nSee also the list of [contributors](https://github.com/dongryphon/switchit/contributors)\r\nwho participated in this project.\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}